plugins {
    id 'com.github.johnrengelman.shadow'
}

architectury {
    platformSetupLoomIde()
    fabric()
}

println "Fabric API: $fabric_api_version, Loader: $fabric_loader_version"

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common

    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:$rootProject.fabric_loader_version"
    modImplementation "net.fabricmc.fabric-api:fabric-api:$rootProject.fabric_api_version+$rootProject.minecraft_version"

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle(project(path: ':common', configuration: 'transformProductionFabric'))

    implementation shadowBundle("cn.evole.onebot:OneBot-Client:$onebot_client_version"){transitive = false}
    implementation shadowBundle("org.spongepowered:configurate-yaml:$yaml_version")
    implementation shadowBundle("com.github.houbb:csv:0.2.0")
    modImplementation ("me.shedaniel.cloth:cloth-config-fabric:$cloth_config_version")
    modRuntimeOnly ("com.terraformersmc:modmenu:$modmenu_version"){transitive = false}
}


shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = "dev-shadow"

    relocate 'org.yaml', 'cn.evole.dependencies.yaml'
    relocate 'org.spongepowered.configurate', 'cn.evole.dependencies.spongepowered.configurate'
    relocate 'io.leangen', 'cn.evole.dependencies.leagen'
    relocate 'org.checkerframework', 'cn.evole.dependencies.checkerframework'
    relocate 'com.google.errorprone', 'cn.evole.dependencies.errorprone'
    relocate 'org.apiguardian', 'cn.evole.dependencies.apiguardian'
    relocate 'com.github.houbb', 'cn.evole.dependencies.houbb'
}

remapJar {
    input.set shadowJar.archiveFile
    archiveClassifier = "fabric"
}